// Fast Exponention

    static long Fastpow(long a,long n){
        long ans=1;
        long mod=1000000007;
        while(n > 0){
            if((n&1) != 0){
                ans=((ans%mod)*(a%mod))%mod;
            }
            a=((a%mod)*(a%mod))%mod;
            n=n>>1;
        }
        return ans;
    }


// Tower of Hanoi

    static void f(int n,String s,String h,String d){
        if(n == 0){
            return;
        }
        f(n-1,s,d,h);
        System.out.println(s+" "+d);
        f(n-1,h,s,d);
    }


// Generating unique permutaions

    static void f(char ch[],int n,String temp,ArrayList<String> list,boolean vis[]){
        if(temp.length() == n){
            list.add(temp);
            return;
        }
        for(int k=0;k<n;k++){
            if(!vis[k]){
                if (k > 0 && ch[k] == ch[k - 1] && !vis[k - 1]) {
                    continue;
                }
                vis[k]=true;
                f(ch,n,temp+ch[k],list,vis);
                vis[k]=false;
            }
        }
    }    


// lowerbound-The lower bound of a value in a sorted collection is defined as the first element that is greater than or equal to the given value.
//upperbound-The first element smaller than a given value in a sorted collection is called the upper bound

    Integer upperBoundKey = map.floorKey(b.get(i));
    Integer lowerBoundKey = map.ceilingKey(b.get(i));


// Radix sort - better

    import java.util.*;

    class Main {

    public static void radixSort(int[] arr) {
        int max = Arrays.stream(arr).max().getAsInt();

        // do count sort for every digit place
        for(int exp = 1; max/exp > 0; exp *= 10) {
        countSort(arr, exp);
        }
    }

    private static void countSort(int[] arr, int exp) {
        int n = arr.length;
        int[] output = new int[n];
        int[] count = new int[10];

        Arrays.fill(count, 0);

        for(int i=0; i<n; i++) {
        count[(arr[i] / exp) % 10]++;
        }

        System.out.println("\nCount array for " + exp + " : " + Arrays.toString(count));

        for(int i=1; i<10; i++) {
        count[i] = count[i] + count[i-1];
        }

        System.out.println("Updated count array " + Arrays.toString(count));

        for(int i=n-1; i>=0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
        }

        System.out.println("Output array " + Arrays.toString(output));
        
        System.arraycopy(output, 0, arr, 0, n);
        
    }
    
    public static void main(String[] args) {
        int[] arr = {29, 83, 471, 36, 91, 8};

        System.out.println("Origin array: " + Arrays.toString(arr));
        radixSort(arr);
        System.out.println("Sorted array: " + Arrays.toString(arr));
    }
    }